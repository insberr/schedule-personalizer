diff --git a/lib/StudentVue/Client/Client copy.js b/lib/StudentVue/Client/Client copy.js
new file mode 100644
index 0000000000000000000000000000000000000000..dd60fc8465dc67610983f001c3d50b4aebfb840e
--- /dev/null
+++ b/lib/StudentVue/Client/Client copy.js	
@@ -0,0 +1,762 @@
+(function (global, factory) {
+  if (typeof define === "function" && define.amd) {
+    define(["exports", "../../utils/soap/soap", "../Message/Message", "date-fns", "../../Constants/EventType", "lodash", "../../Constants/ResourceType", "../ReportCard/ReportCard", "../Document/Document", "../RequestException/RequestException", "../../utils/XMLFactory/XMLFactory", "../../utils/cache/cache", "./Client.helpers"], factory);
+  } else if (typeof exports !== "undefined") {
+    factory(exports, require("../../utils/soap/soap"), require("../Message/Message"), require("date-fns"), require("../../Constants/EventType"), require("lodash"), require("../../Constants/ResourceType"), require("../ReportCard/ReportCard"), require("../Document/Document"), require("../RequestException/RequestException"), require("../../utils/XMLFactory/XMLFactory"), require("../../utils/cache/cache"), require("./Client.helpers"));
+  } else {
+    var mod = {
+      exports: {}
+    };
+    factory(mod.exports, global.soap, global.Message, global.dateFns, global.EventType, global.lodash, global.ResourceType, global.ReportCard, global.Document, global.RequestException, global.XMLFactory, global.cache, global.Client);
+    global.Client = mod.exports;
+  }
+})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _soap, _Message, _dateFns, _EventType, _lodash, _ResourceType, _ReportCard, _Document, _RequestException, _XMLFactory, _cache, _Client) {
+  "use strict";
+
+  Object.defineProperty(_exports, "__esModule", {
+    value: true
+  });
+  _exports.default = void 0;
+  _soap = _interopRequireDefault(_soap);
+  _Message = _interopRequireDefault(_Message);
+  _EventType = _interopRequireDefault(_EventType);
+  _lodash = _interopRequireDefault(_lodash);
+  _ResourceType = _interopRequireDefault(_ResourceType);
+  _ReportCard = _interopRequireDefault(_ReportCard);
+  _Document = _interopRequireDefault(_Document);
+  _RequestException = _interopRequireDefault(_RequestException);
+  _XMLFactory = _interopRequireDefault(_XMLFactory);
+  _cache = _interopRequireDefault(_cache);
+  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+  /**
+   * The StudentVUE Client to access the API
+   * @constructor
+   * @extends {soap.Client}
+   */
+  class Client extends _soap.default.Client {
+    constructor(credentials, hostUrl) {
+      super(credentials);
+      this.hostUrl = hostUrl;
+    }
+
+    /**
+     * Validate's the user's credentials. It will throw an error if credentials are incorrect
+     */
+    validateCredentials() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'login test',
+          validateErrors: false
+        }).then(response => {
+          if (response.RT_ERROR[0]['@_ERROR_MESSAGE'][0] === 'login test is not a valid method.') {
+            res();
+          } else rej(new _RequestException.default(response));
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Gets the student's documents from synergy servers
+     * @returns {Promise<Document[]>}> Returns a list of student documents
+     * @description
+     * ```js
+     * const documents = await client.documents();
+     * const document = documents[0];
+     * const files = await document.get();
+     * const base64collection = files.map((file) => file.base64);
+     * ```
+     */
+    documents() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'GetStudentDocumentInitialData',
+          paramStr: {
+            childIntId: 0
+          }
+        }).then(xmlObject => {
+          var _a = xmlObject['StudentDocuments'][0].StudentDocumentDatas[0].StudentDocumentData;
+          var _f = xml => {
+            return new _Document.default(xml, super.credentials);
+          };
+          var _r = [];
+          for (var _i = 0; _i < _a.length; _i++) {
+            _r.push(_f(_a[_i], _i, _a));
+          }
+          res(_r);
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Gets a list of report cards
+     * @returns {Promise<ReportCard[]>} Returns a list of report cards that can fetch a file
+     * @description
+     * ```js
+     * const reportCards = await client.reportCards();
+     * const files = await Promise.all(reportCards.map((card) => card.get()));
+     * const base64arr = files.map((file) => file.base64); // ["JVBERi0...", "dUIoa1...", ...];
+     * ```
+     */
+    reportCards() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'GetReportCardInitialData',
+          paramStr: {
+            childIntId: 0
+          }
+        }).then(xmlObject => {
+          var _a2 = xmlObject.RCReportingPeriodData[0].RCReportingPeriods[0].RCReportingPeriod;
+          var _f2 = xml => {
+            return new _ReportCard.default(xml, super.credentials);
+          };
+          var _r2 = [];
+          for (var _i2 = 0; _i2 < _a2.length; _i2++) {
+            _r2.push(_f2(_a2[_i2], _i2, _a2));
+          }
+          res(_r2);
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Gets the student's school's information
+     * @returns {Promise<SchoolInfo>} Returns the information of the student's school
+     * @description
+     * ```js
+     * await client.schoolInfo();
+     *
+     * client.schoolInfo().then((schoolInfo) => {
+     *  console.log(_.uniq(schoolInfo.staff.map((staff) => staff.name))); // List all staff positions using lodash
+     * })
+     * ```
+     */
+    schoolInfo() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'StudentSchoolInfo',
+          paramStr: {
+            childIntID: 0
+          }
+        }).then(({
+          StudentSchoolInfoListing: [xmlObject]
+        }) => {
+          var _a3 = xmlObject.StaffLists[0].StaffList;
+          var _f3 = staff => {
+            return {
+              name: staff['@_Name'][0],
+              email: staff['@_EMail'][0],
+              staffGu: staff['@_StaffGU'][0],
+              jobTitle: staff['@_Title'][0],
+              extn: staff['@_Extn'][0],
+              phone: staff['@_Phone'][0]
+            };
+          };
+          var _r3 = [];
+          for (var _i3 = 0; _i3 < _a3.length; _i3++) {
+            _r3.push(_f3(_a3[_i3], _i3, _a3));
+          }
+          res({
+            school: {
+              address: xmlObject['@_SchoolAddress'][0],
+              addressAlt: xmlObject['@_SchoolAddress2'][0],
+              city: xmlObject['@_SchoolCity'][0],
+              zipCode: xmlObject['@_SchoolZip'][0],
+              phone: xmlObject['@_Phone'][0],
+              altPhone: xmlObject['@_Phone2'][0],
+              principal: {
+                name: xmlObject['@_Principal'][0],
+                email: xmlObject['@_PrincipalEmail'][0],
+                staffGu: xmlObject['@_PrincipalGu'][0]
+              }
+            },
+            staff: _r3
+          });
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Gets the schedule of the student
+     * @param {number} termIndex The index of the term.
+     * @returns {Promise<Schedule>} Returns the schedule of the student
+     * @description
+     * ```js
+     * await schedule(0) // -> { term: { index: 0, name: '1st Qtr Progress' }, ... }
+     * ```
+     */
+    schedule(termIndex) {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'StudentClassList',
+          paramStr: {
+            childIntId: 0,
+            ...(termIndex != null ? {
+              TermIndex: termIndex
+            } : {})
+          }
+        }).then(xmlObject => {
+          var _a4 = xmlObject.StudentClassSchedule[0].TermLists[0].TermListing;
+          var _f4 = term => {
+            return {
+              date: {
+                start: new Date(term['@_BeginDate'][0]),
+                end: new Date(term['@_EndDate'][0])
+              },
+              index: Number(term['@_TermIndex'][0]),
+              name: term['@_TermName'][0],
+              schoolYearTermCodeGu: term['@_SchoolYearTrmCodeGU'][0]
+            };
+          };
+          var _r4 = [];
+          for (var _i4 = 0; _i4 < _a4.length; _i4++) {
+            _r4.push(_f4(_a4[_i4], _i4, _a4));
+          }
+          res({
+            term: {
+              index: Number(xmlObject.StudentClassSchedule[0]['@_TermIndex'][0]),
+              name: xmlObject.StudentClassSchedule[0]['@_TermIndexName'][0]
+            },
+            error: xmlObject.StudentClassSchedule[0]['@_ErrorMessage'][0],
+            today: typeof xmlObject.StudentClassSchedule[0].TodayScheduleInfoData[0].SchoolInfos[0] !== 'string' ? xmlObject.StudentClassSchedule[0].TodayScheduleInfoData[0].SchoolInfos[0].SchoolInfo.map(school => {
+              return {
+                name: school['@_SchoolName'][0],
+                bellScheduleName: school['@_BellSchedName'][0],
+                classes: typeof school.Classes[0] !== 'string' ? school.Classes[0].ClassInfo.map(course => {
+                  return {
+                    period: Number(course['@_Period'][0]),
+                    attendanceCode: course.AttendanceCode[0],
+                    date: {
+                      start: new Date(course['@_StartDate'][0]),
+                      end: new Date(course['@_EndDate'][0])
+                    },
+                    name: course['@_ClassName'][0],
+                    sectionGu: course['@_SectionGU'][0],
+                    teacher: {
+                      email: course['@_TeacherEmail'][0],
+                      emailSubject: course['@_EmailSubject'][0],
+                      name: course['@_TeacherName'][0],
+                      staffGu: course['@_StaffGU'][0],
+                      url: course['@_TeacherURL'][0]
+                    },
+                    url: course['@_ClassURL'][0],
+                    time: {
+                      start: (0, _dateFns.parse)(course['@_StartTime'][0], 'hh:mm a', Date.now()),
+                      end: (0, _dateFns.parse)(course['@_EndTime'][0], 'hh:mm a', Date.now())
+                    }
+                  };
+                }) : []
+              };
+            }) : [],
+            classes: typeof xmlObject.StudentClassSchedule[0].ClassLists[0] !== 'string' ? xmlObject.StudentClassSchedule[0].ClassLists[0].ClassListing.map(studentClass => {
+              return {
+                name: studentClass['@_CourseTitle'][0],
+                period: Number(studentClass['@_Period'][0]),
+                room: studentClass['@_RoomName'][0],
+                sectionGu: studentClass['@_SectionGU'][0],
+                teacher: {
+                  name: studentClass['@_Teacher'][0],
+                  email: studentClass['@_TeacherEmail'][0],
+                  staffGu: studentClass['@_TeacherStaffGU'][0]
+                }
+              };
+            }) : [],
+            terms: _r4
+          });
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Returns the attendance of the student
+     * @returns {Promise<Attendance>} Returns an Attendance object
+     * @description
+     * ```js
+     * client.attendance()
+     *  .then(console.log); // -> { type: 'Period', period: {...}, schoolName: 'University High School', absences: [...], periodInfos: [...] }
+     * ```
+     */
+    attendance() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'Attendance',
+          paramStr: {
+            childIntId: 0
+          }
+        }).then(attendanceXMLObject => {
+          const xmlObject = attendanceXMLObject.Attendance[0];
+          var _a5 = xmlObject.TotalActivities[0].PeriodTotal;
+          var _f5 = (pd, i) => {
+            return {
+              period: Number(pd['@_Number'][0]),
+              total: {
+                excused: Number(xmlObject.TotalExcused[0].PeriodTotal[i]['@_Total'][0]),
+                tardies: Number(xmlObject.TotalTardies[0].PeriodTotal[i]['@_Total'][0]),
+                unexcused: Number(xmlObject.TotalUnexcused[0].PeriodTotal[i]['@_Total'][0]),
+                activities: Number(xmlObject.TotalActivities[0].PeriodTotal[i]['@_Total'][0]),
+                unexcusedTardies: Number(xmlObject.TotalUnexcusedTardies[0].PeriodTotal[i]['@_Total'][0])
+              }
+            };
+          };
+          var _r5 = [];
+          for (var _i5 = 0; _i5 < _a5.length; _i5++) {
+            _r5.push(_f5(_a5[_i5], _i5, _a5));
+          }
+          res({
+            type: xmlObject['@_Type'][0],
+            period: {
+              total: Number(xmlObject['@_PeriodCount'][0]),
+              start: Number(xmlObject['@_StartPeriod'][0]),
+              end: Number(xmlObject['@_EndPeriod'][0])
+            },
+            schoolName: xmlObject['@_SchoolName'][0],
+            absences: xmlObject.Absences[0].Absence ? xmlObject.Absences[0].Absence.map(absence => {
+              return {
+                date: new Date(absence['@_AbsenceDate'][0]),
+                reason: absence['@_Reason'][0],
+                note: absence['@_Note'][0],
+                description: absence['@_CodeAllDayDescription'][0],
+                periods: absence.Periods[0].Period.map(period => {
+                  return {
+                    period: Number(period['@_Number'][0]),
+                    name: period['@_Name'][0],
+                    reason: period['@_Reason'][0],
+                    course: period['@_Course'][0],
+                    staff: {
+                      name: period['@_Staff'][0],
+                      staffGu: period['@_StaffGU'][0],
+                      email: period['@_StaffEMail'][0]
+                    },
+                    orgYearGu: period['@_OrgYearGU'][0]
+                  };
+                })
+              };
+            }) : [],
+            periodInfos: _r5
+          });
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Returns the gradebook of the student
+     * @param {number} reportingPeriodIndex The timeframe that the gradebook should return
+     * @returns {Promise<Gradebook>} Returns a Gradebook object
+     * @description
+     * ```js
+     * const gradebook = await client.gradebook();
+     * console.log(gradebook); // { error: '', type: 'Traditional', reportingPeriod: {...}, courses: [...] };
+     *
+     * await client.gradebook(0) // Some schools will have ReportingPeriodIndex 0 as "1st Quarter Progress"
+     * await client.gradebook(7) // Some schools will have ReportingPeriodIndex 7 as "4th Quarter"
+     * ```
+     */
+    gradebook(reportingPeriodIndex) {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'Gradebook',
+          paramStr: {
+            childIntId: 0,
+            ...(reportingPeriodIndex != null ? {
+              ReportPeriod: reportingPeriodIndex
+            } : {})
+          }
+        }, xml => {
+          return new _XMLFactory.default(xml).encodeAttribute('MeasureDescription', 'HasDropBox').encodeAttribute('Measure', 'Type').toString();
+        }).then(xmlObject => {
+          var _a6 = xmlObject.Gradebook[0].ReportingPeriods[0].ReportPeriod;
+          var _f6 = period => {
+            return {
+              date: {
+                start: new Date(period['@_StartDate'][0]),
+                end: new Date(period['@_EndDate'][0])
+              },
+              name: period['@_GradePeriod'][0],
+              index: Number(period['@_Index'][0])
+            };
+          };
+          var _r6 = [];
+          for (var _i6 = 0; _i6 < _a6.length; _i6++) {
+            _r6.push(_f6(_a6[_i6], _i6, _a6));
+          }
+          var _a7 = xmlObject.Gradebook[0].Courses[0].Course;
+          var _f7 = course => {
+            var _a8 = course.Marks[0].Mark;
+            var _f8 = mark => {
+              return {
+                name: mark['@_MarkName'][0],
+                calculatedScore: {
+                  string: mark['@_CalculatedScoreString'][0],
+                  raw: Number(mark['@_CalculatedScoreRaw'][0])
+                },
+                weightedCategories: typeof mark['GradeCalculationSummary'][0] !== 'string' ? mark['GradeCalculationSummary'][0].AssignmentGradeCalc.map(weighted => {
+                  return {
+                    type: weighted['@_Type'][0],
+                    calculatedMark: weighted['@_CalculatedMark'][0],
+                    weight: {
+                      evaluated: weighted['@_WeightedPct'][0],
+                      standard: weighted['@_Weight'][0]
+                    },
+                    points: {
+                      current: Number(weighted['@_Points'][0]),
+                      possible: Number(weighted['@_PointsPossible'][0])
+                    }
+                  };
+                }) : [],
+                assignments: typeof mark.Assignments[0] !== 'string' ? mark.Assignments[0].Assignment.map(assignment => {
+                  return {
+                    gradebookId: assignment['@_GradebookID'][0],
+                    name: decodeURI(assignment['@_Measure'][0]),
+                    type: assignment['@_Type'][0],
+                    date: {
+                      start: new Date(assignment['@_Date'][0]),
+                      due: new Date(assignment['@_DueDate'][0])
+                    },
+                    score: {
+                      type: assignment['@_ScoreType'][0],
+                      value: assignment['@_Score'][0]
+                    },
+                    points: assignment['@_Points'][0],
+                    notes: assignment['@_Notes'][0],
+                    teacherId: assignment['@_TeacherID'][0],
+                    description: decodeURI(assignment['@_MeasureDescription'][0]),
+                    hasDropbox: JSON.parse(assignment['@_HasDropBox'][0]),
+                    studentId: assignment['@_StudentID'][0],
+                    dropboxDate: {
+                      start: new Date(assignment['@_DropStartDate'][0]),
+                      end: new Date(assignment['@_DropEndDate'][0])
+                    },
+                    resources: typeof assignment.Resources[0] !== 'string' ? assignment.Resources[0].Resource.map(rsrc => {
+                      switch (rsrc['@_Type'][0]) {
+                        case 'File':
+                          {
+                            const fileRsrc = rsrc;
+                            return {
+                              type: _ResourceType.default.FILE,
+                              file: {
+                                type: fileRsrc['@_FileType'][0],
+                                name: fileRsrc['@_FileName'][0],
+                                uri: this.hostUrl + fileRsrc['@_ServerFileName'][0]
+                              },
+                              resource: {
+                                date: new Date(fileRsrc['@_ResourceDate'][0]),
+                                id: fileRsrc['@_ResourceID'][0],
+                                name: fileRsrc['@_ResourceName'][0]
+                              }
+                            };
+                          }
+                        case 'URL':
+                          {
+                            const urlRsrc = rsrc;
+                            return {
+                              url: urlRsrc['@_URL'][0],
+                              type: _ResourceType.default.URL,
+                              resource: {
+                                date: new Date(urlRsrc['@_ResourceDate'][0]),
+                                id: urlRsrc['@_ResourceID'][0],
+                                name: urlRsrc['@_ResourceName'][0],
+                                description: urlRsrc['@_ResourceDescription'][0]
+                              },
+                              path: urlRsrc['@_ServerFileName'][0]
+                            };
+                          }
+                        default:
+                          rej(`Type ${rsrc['@_Type'][0]} does not exist as a type. Add it to type declarations.`);
+                      }
+                    }) : []
+                  };
+                }) : []
+              };
+            };
+            var _r8 = [];
+            for (var _i8 = 0; _i8 < _a8.length; _i8++) {
+              _r8.push(_f8(_a8[_i8], _i8, _a8));
+            }
+            return {
+              period: Number(course['@_Period'][0]),
+              title: course['@_Title'][0],
+              room: course['@_Room'][0],
+              staff: {
+                name: course['@_Staff'][0],
+                email: course['@_StaffEMail'][0],
+                staffGu: course['@_StaffGU'][0]
+              },
+              marks: _r8
+            };
+          };
+          var _r7 = [];
+          for (var _i7 = 0; _i7 < _a7.length; _i7++) {
+            _r7.push(_f7(_a7[_i7], _i7, _a7));
+          }
+          res({
+            error: xmlObject.Gradebook[0]['@_ErrorMessage'][0],
+            type: xmlObject.Gradebook[0]['@_Type'][0],
+            reportingPeriod: {
+              current: {
+                index: reportingPeriodIndex ?? Number(xmlObject.Gradebook[0].ReportingPeriods[0].ReportPeriod.find(x => {
+                  return x['@_GradePeriod'][0] === xmlObject.Gradebook[0].ReportingPeriod[0]['@_GradePeriod'][0];
+                })?.['@_Index'][0]),
+                date: {
+                  start: new Date(xmlObject.Gradebook[0].ReportingPeriod[0]['@_StartDate'][0]),
+                  end: new Date(xmlObject.Gradebook[0].ReportingPeriod[0]['@_EndDate'][0])
+                },
+                name: xmlObject.Gradebook[0].ReportingPeriod[0]['@_GradePeriod'][0]
+              },
+              available: _r6
+            },
+            courses: _r7
+          });
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Get a list of messages of the student
+     * @returns {Promise<Message[]>} Returns an array of messages of the student
+     * @description
+     * ```js
+     * await client.messages(); // -> [{ id: 'E972F1BC-99A0-4CD0-8D15-B18968B43E08', type: 'StudentActivity', ... }, { id: '86FDA11D-42C7-4249-B003-94B15EB2C8D4', type: 'StudentActivity', ... }]
+     * ```
+     */
+    messages() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'GetPXPMessages',
+          paramStr: {
+            childIntId: 0
+          }
+        }, xml => {
+          return new _XMLFactory.default(xml).encodeAttribute('Content', 'Read').toString();
+        }).then(xmlObject => {
+          var _a9 = xmlObject.PXPMessagesData[0].MessageListings[0].MessageListing;
+          var _f9 = message => {
+            return new _Message.default(message, super.credentials, this.hostUrl);
+          };
+          var _r9 = [];
+          for (var _i9 = 0; _i9 < _a9.length; _i9++) {
+            _r9.push(_f9(_a9[_i9], _i9, _a9));
+          }
+          res(_r9);
+        }).catch(rej);
+      });
+    }
+
+    /**
+     * Gets the info of a student
+     * @returns {Promise<StudentInfo>} StudentInfo object
+     * @description
+     * ```js
+     * studentInfo().then(console.log) // -> { student: { name: 'Evan Davis', nickname: '', lastName: 'Davis' }, ...}
+     * ```
+     */
+    studentInfo() {
+      return new Promise((res, rej) => {
+        super.processRequest({
+          methodName: 'StudentInfo',
+          paramStr: {
+            childIntId: 0
+          }
+        }).then(xmlObjectData => {
+          res({
+            student: {
+              name: xmlObjectData.StudentInfo[0].FormattedName[0],
+              lastName: xmlObjectData.StudentInfo[0].LastNameGoesBy[0],
+              nickname: xmlObjectData.StudentInfo[0].NickName[0]
+            },
+            birthDate: new Date(xmlObjectData.StudentInfo[0].BirthDate[0]),
+            track: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Track),
+            address: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Address),
+            photo: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Photo),
+            counselor: xmlObjectData.StudentInfo[0].CounselorName && xmlObjectData.StudentInfo[0].CounselorEmail && xmlObjectData.StudentInfo[0].CounselorStaffGU ? {
+              name: xmlObjectData.StudentInfo[0].CounselorName[0],
+              email: xmlObjectData.StudentInfo[0].CounselorEmail[0],
+              staffGu: xmlObjectData.StudentInfo[0].CounselorStaffGU[0]
+            } : undefined,
+            currentSchool: xmlObjectData.StudentInfo[0].CurrentSchool[0],
+            dentist: xmlObjectData.StudentInfo[0].Dentist ? {
+              name: xmlObjectData.StudentInfo[0].Dentist[0]['@_Name'][0],
+              phone: xmlObjectData.StudentInfo[0].Dentist[0]['@_Phone'][0],
+              extn: xmlObjectData.StudentInfo[0].Dentist[0]['@_Extn'][0],
+              office: xmlObjectData.StudentInfo[0].Dentist[0]['@_Office'][0]
+            } : undefined,
+            physician: xmlObjectData.StudentInfo[0].Physician ? {
+              name: xmlObjectData.StudentInfo[0].Physician[0]['@_Name'][0],
+              phone: xmlObjectData.StudentInfo[0].Physician[0]['@_Phone'][0],
+              extn: xmlObjectData.StudentInfo[0].Physician[0]['@_Extn'][0],
+              hospital: xmlObjectData.StudentInfo[0].Physician[0]['@_Hospital'][0]
+            } : undefined,
+            id: (0, _Client.optional)(xmlObjectData.StudentInfo[0].PermID),
+            orgYearGu: (0, _Client.optional)(xmlObjectData.StudentInfo[0].OrgYearGU),
+            phone: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Phone),
+            email: (0, _Client.optional)(xmlObjectData.StudentInfo[0].EMail),
+            emergencyContacts: xmlObjectData.StudentInfo[0].EmergencyContacts ? xmlObjectData.StudentInfo[0].EmergencyContacts[0].EmergencyContact.map(contact => {
+              return {
+                name: (0, _Client.optional)(contact['@_Name']),
+                phone: {
+                  home: (0, _Client.optional)(contact['@_HomePhone']),
+                  mobile: (0, _Client.optional)(contact['@_MobilePhone']),
+                  other: (0, _Client.optional)(contact['@_OtherPhone']),
+                  work: (0, _Client.optional)(contact['@_WorkPhone'])
+                },
+                relationship: (0, _Client.optional)(contact['@_Relationship'])
+              };
+            }) : [],
+            gender: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Gender),
+            grade: (0, _Client.optional)(xmlObjectData.StudentInfo[0].Grade),
+            lockerInfoRecords: (0, _Client.optional)(xmlObjectData.StudentInfo[0].LockerInfoRecords),
+            homeLanguage: (0, _Client.optional)(xmlObjectData.StudentInfo[0].HomeLanguage),
+            homeRoom: (0, _Client.optional)(xmlObjectData.StudentInfo[0].HomeRoom),
+            homeRoomTeacher: {
+              email: (0, _Client.optional)(xmlObjectData.StudentInfo[0].HomeRoomTchEMail),
+              name: (0, _Client.optional)(xmlObjectData.StudentInfo[0].HomeRoomTch),
+              staffGu: (0, _Client.optional)(xmlObjectData.StudentInfo[0].HomeRoomTchStaffGU)
+            },
+            additionalInfo: xmlObjectData.StudentInfo[0].UserDefinedGroupBoxes[0].UserDefinedGroupBox ? xmlObjectData.StudentInfo[0].UserDefinedGroupBoxes[0].UserDefinedGroupBox.map(definedBox => {
+              return {
+                id: (0, _Client.optional)(definedBox['@_GroupBoxID']),
+                // string | undefined
+                type: definedBox['@_GroupBoxLabel'][0],
+                // string
+                vcId: (0, _Client.optional)(definedBox['@_VCID']),
+                // string | undefined
+                items: definedBox.UserDefinedItems[0].UserDefinedItem.map(item => {
+                  return {
+                    source: {
+                      element: item['@_SourceElement'][0],
+                      object: item['@_SourceObject'][0]
+                    },
+                    vcId: item['@_VCID'][0],
+                    value: item['@_Value'][0],
+                    type: item['@_ItemType'][0]
+                  };
+                })
+              };
+            }) : []
+          });
+        }).catch(rej);
+      });
+    }
+    fetchEventsWithinInterval(date) {
+      return super.processRequest({
+        methodName: 'StudentCalendar',
+        paramStr: {
+          childIntId: 0,
+          RequestDate: date.toISOString()
+        }
+      }, xml => {
+        return new _XMLFactory.default(xml).encodeAttribute('Title', 'Icon').toString();
+      });
+    }
+
+    /**
+     *
+     * @param {CalendarOptions} options Options to provide for calendar method. An interval is required.
+     * @returns {Promise<Calendar>} Returns a Calendar object
+     * @description
+     * ```js
+     * client.calendar({ interval: { start: new Date('5/1/2022'), end: new Date('8/1/2021') }, concurrency: null }); // -> Limitless concurrency (not recommended)
+     *
+     * const calendar = await client.calendar({ interval: { ... }});
+     * console.log(calendar); // -> { schoolDate: {...}, outputRange: {...}, events: [...] }
+     * ```
+     */
+    async calendar(options = {}) {
+      const defaultOptions = {
+        concurrency: 7,
+        ...options
+      };
+      const cal = await _cache.default.memo(() => {
+        return this.fetchEventsWithinInterval(new Date());
+      });
+      const schoolEndDate = options.interval?.end ?? new Date(cal.CalendarListing[0]['@_SchoolEndDate'][0]);
+      const schoolStartDate = options.interval?.start ?? new Date(cal.CalendarListing[0]['@_SchoolBegDate'][0]);
+      return new Promise((res, rej) => {
+        const monthsWithinSchoolYear = (0, _dateFns.eachMonthOfInterval)({
+          start: schoolStartDate,
+          end: schoolEndDate
+        });
+        const getAllEventsWithinSchoolYear = () => {
+          return defaultOptions.concurrency == null ? Promise.all(monthsWithinSchoolYear.map(date => {
+            return this.fetchEventsWithinInterval(date);
+          })) : (0, _Client.asyncPoolAll)(defaultOptions.concurrency, monthsWithinSchoolYear, date => {
+            return this.fetchEventsWithinInterval(date);
+          });
+        };
+        let memo = null;
+        getAllEventsWithinSchoolYear().then(events => {
+          const allEvents = events.reduce((prev, events) => {
+            if (memo == null) {
+              memo = {
+                schoolDate: {
+                  start: new Date(events.CalendarListing[0]['@_SchoolBegDate'][0]),
+                  end: new Date(events.CalendarListing[0]['@_SchoolEndDate'][0])
+                },
+                outputRange: {
+                  start: schoolStartDate,
+                  end: schoolEndDate
+                },
+                events: []
+              };
+            }
+            const rest = {
+              ...memo,
+              // This is to prevent re-initializing Date objects in order to improve performance
+              events: [...(prev.events ? prev.events : []), ...(typeof events.CalendarListing[0].EventLists[0] !== 'string' ? events.CalendarListing[0].EventLists[0].EventList.map(event => {
+                switch (event['@_DayType'][0]) {
+                  case _EventType.default.ASSIGNMENT:
+                    {
+                      const assignmentEvent = event;
+                      return {
+                        title: decodeURI(assignmentEvent['@_Title'][0]),
+                        addLinkData: assignmentEvent['@_AddLinkData'][0],
+                        agu: assignmentEvent['@_AGU'] ? assignmentEvent['@_AGU'][0] : undefined,
+                        date: new Date(assignmentEvent['@_Date'][0]),
+                        dgu: assignmentEvent['@_DGU'][0],
+                        link: assignmentEvent['@_Link'][0],
+                        startTime: assignmentEvent['@_StartTime'][0],
+                        type: _EventType.default.ASSIGNMENT,
+                        viewType: assignmentEvent['@_ViewType'][0]
+                      };
+                    }
+                  case _EventType.default.HOLIDAY:
+                    {
+                      return {
+                        title: decodeURI(event['@_Title'][0]),
+                        type: _EventType.default.HOLIDAY,
+                        startTime: event['@_StartTime'][0],
+                        date: new Date(event['@_Date'][0])
+                      };
+                    }
+                  case _EventType.default.REGULAR:
+                    {
+                      const regularEvent = event;
+                      return {
+                        title: decodeURI(regularEvent['@_Title'][0]),
+                        agu: regularEvent['@_AGU'] ? regularEvent['@_AGU'][0] : undefined,
+                        date: new Date(regularEvent['@_Date'][0]),
+                        description: regularEvent['@_EvtDescription'] ? regularEvent['@_EvtDescription'][0] : undefined,
+                        dgu: regularEvent['@_DGU'] ? regularEvent['@_DGU'][0] : undefined,
+                        link: regularEvent['@_Link'] ? regularEvent['@_Link'][0] : undefined,
+                        startTime: regularEvent['@_StartTime'][0],
+                        type: _EventType.default.REGULAR,
+                        viewType: regularEvent['@_ViewType'] ? regularEvent['@_ViewType'][0] : undefined,
+                        addLinkData: regularEvent['@_AddLinkData'] ? regularEvent['@_AddLinkData'][0] : undefined
+                      };
+                    }
+                }
+              }) : [])]
+            };
+            return rest;
+          }, {});
+          res({
+            ...allEvents,
+            events: _lodash.default.uniqBy(allEvents.events, item => {
+              return item.title;
+            })
+          });
+        }).catch(rej);
+      });
+    }
+  }
+  _exports.default = Client;
+});
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/lib/StudentVue/Client/Client.js b/lib/StudentVue/Client/Client.js
index 4207673bb48f65253e1837e67984076da5813c8e..00989235eff860e47e6f4f16931e0beab8bf7f95 100644
--- a/lib/StudentVue/Client/Client.js
+++ b/lib/StudentVue/Client/Client.js
@@ -48,7 +48,7 @@
           methodName: 'login test',
           validateErrors: false
         }).then(response => {
-          if (response.RT_ERROR[0]['@_ERROR_MESSAGE'][0] === 'login test is not a valid method.') {
+          if (response.RT_ERROR[0]['@_ERROR_MESSAGE'][0] === 'This app is currently unavailable, please try again later.') {
             res();
           } else rej(new _RequestException.default(response));
         }).catch(rej);
