function defaultZero {
    user classes contains [period 0]; // only if the user has a period zero
    self classes contains [arrival]; // if the schedule referencing this overide has a class of type arrival
    // replace class <matcher> with <block>
    // basically find the class that matches the matcher (type or period or both) and replace it with the statements in the block
    replace class [arrival] with {
        class [period 0] [6:30 to 7:30];
    }; //replaces arrival with the statements in the block (allows multiple statements)

};

// its like a function!
function cambridge [eleven twelve thirteen] {
    /*
        Things passed to an overide by default

        user
        - classes
        - grade

        schedule - reference to the schedule in which this overide is in

        Has and Contains
        - With a list of items
        has - All the items exist
        contains - At least one of the items exist

        - With one item
        They are the same lol

        Equals
        - Has only the item or items, nothing more, nothing less.
    */
    // only continue doing conditions if this is true
    // if period 11, 12, or 13 is in the users classses
    user classes contains [11] [12] [13]; // maybe be able to specifiy and/or? (also matchers!)
    // imagine something like
    // user classes contains { period 3 with teacher [Rick Astley] }
    // blocks not passed into a statement are "absorbed" into their parent if all contitions match, like an if statement
    {
        only grade 10; // the only command searches for an item in the context, and compares it, IE passing variables from JS
        // these are matchers, remove can take many arguments
        remove [period 1] [period 2];
        // with the power of blocks!
        // insert <block> <location>
        insert {
            class [period 11] [$eleven]; // dont get me fucking started on dot accessers, good fucking luck
            class [period 12] [$twelve]; // How about just times[12] instead
            class [period 13] [$thirteen];
        } last operation; // last operation; in this example, puts this in place of where [period 2] was
    }
    {
        only grade 11;
        remove [2] [3];
        insert {
            class [11] [$eleven];
            class [12] [$twelve];
            class [13] [$thirteen];
        } last operation; // last operation; in this example, puts this in place of where [period 2] was
        force lunch 3;
    }
};
