{"version":3,"sources":["scs.ts"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["import { existsSync, readFileSync, WriteStream } from 'fs';\nimport { opendir, readdir, readFile, stat, writeFile } from 'fs/promises';\nimport { dirname, extname, join } from 'path';\nimport { SCS, LintObject, LintLevel } from '..';\nlet args = process.argv.slice(2);\n\nconst commands = [\n    'prettyMany',\n    'pretty',\n    'minifyMany',\n    'minify',\n    'lint',\n    'exec',\n    'parse',\n];\n\nconst colors = {\n    [LintLevel.error]: '\\x1b[31m',\n    [LintLevel.warn]: '\\x1b[33m',\n    [LintLevel.info]: '\\x1b[90m',\n    reset: '\\x1b[0m',\n};\n\nfunction resolver(basedir: string) {\n    return (path: string) => {\n        let out = '';\n        try {\n            out = readFileSync(join(dirname(basedir), path), 'utf-8');\n        } catch (e) {\n            try {\n                out = readFileSync(\n                    join(dirname(basedir), path + '.scs'),\n                    'utf-8'\n                );\n            } catch (e) {\n                throw new Error(`Cannot resolve ${path}`);\n            }\n        }\n        return out;\n    };\n}\n\nfunction usage() {\n    console.log('SCS-CLI v0.0.0');\n    console.log('Usage:');\n    console.log();\n    console.log('scs prettyMany [...files]');\n    console.log('prettifies many files in place');\n    console.log();\n    console.log('scs pretty <infile> [outfile]');\n    console.log('prettify a single file');\n    console.log();\n    console.log('scs minifyMany [...files]');\n    console.log('minifies many files in place');\n    console.log();\n    console.log('scs minify <infile> [outfile]');\n    console.log('minifies a single file');\n    console.log();\n    console.log('scs lint [...files]');\n    console.log('lints many files');\n    console.log();\n    console.log('scs exec <infile> [outfile] [...args]');\n    console.log(\n        'executes infile, writes the output context to outfile. specify args in key=value, spaces not supported'\n    );\n    console.log('example: scs exec in.scs out.json grade=10 name=weckysmecky');\n    console.log();\n    console.log('scs parse <infile> [outfile]');\n    console.log('parses infile and outputs the parsed tree to outfile');\n    console.log();\n}\n\nasync function resolve(arg: string[]): Promise<string[]> {\n    const e: string[] = [];\n    let i = 0;\n    while (i < arg.length) {\n        const pat = arg[i];\n        //console.log(pat);\n        const info = await stat(pat);\n        if (info.isDirectory()) {\n            //console.log('directory');\n            const dir = await readdir(pat);\n            //console.log(dir);\n            arg = [...arg, ...dir.map((f) => join(pat, f))];\n            //console.log(arg);\n        }\n        if (info.isFile()) {\n            //console.log('file');\n            if (extname(pat) == '.scs') {\n                e.push(pat);\n            }\n        }\n        i++;\n    }\n    return e;\n}\n\nasync function operate(\n    inf: string,\n    outf: string,\n    fn: (data: string) => Promise<string>\n) {\n    if (!existsSync(inf)) {\n        throw new Error('infile doesnt exist!');\n    }\n    const data = await readFile(inf, 'utf-8');\n    const start = performance.now();\n    const retd = await fn(data);\n    const end = performance.now();\n    if (outf == '-') {\n        process.stdout.write(retd);\n        return -1;\n    }\n    await writeFile(outf, retd);\n    return end - start;\n}\n\nasync function main(command?: string) {\n    if (!commands.includes(command || 'undefined')) {\n        usage();\n        return;\n    }\n    if (command == 'minify') {\n        const infile = args.shift();\n        const outfile = args.shift() || '-';\n        if (!infile) {\n            usage();\n            return;\n        }\n        const end = await operate(infile, outfile, async (dt) => {\n            const f = new SCS(dt, resolver(infile));\n            return f.minify();\n        });\n        if (end != -1) {\n            console.log('Minified', infile, 'in', end.toFixed(2), 'ms');\n        }\n    } else if (command == 'pretty') {\n        const infile = args.shift();\n        const outfile = args.shift() || '-';\n        if (!infile) {\n            usage();\n            return;\n        }\n        const end = await operate(infile, outfile, async (dt) => {\n            const f = new SCS(dt, resolver(infile));\n            return f.pretty();\n        });\n        if (end != -1) {\n            console.log('Prettified', infile, 'in', end.toFixed(2), 'ms');\n        }\n    } else if (command == 'parse') {\n        const infile = args.shift();\n        const outfile = args.shift() || '-';\n        if (!infile) {\n            usage();\n            return;\n        }\n        const end = await operate(infile, outfile, async (dt) => {\n            const f = new SCS(dt, resolver(infile));\n            return JSON.stringify(f.parsed, null, 2);\n        });\n        if (end != -1) {\n            console.log('Parsed', infile, 'in', end.toFixed(2), 'ms');\n        }\n    } else if (command == 'exec') {\n        const infile = args.shift();\n        const outfile = args.shift() || '-';\n        const _arg = args.map((n) => {\n            const [key, _value] = n.split('=');\n            const value = JSON.parse(_value);\n            return [key, value];\n        });\n        const arg: any = {};\n        _arg.forEach((n) => {\n            arg[n[0]] = n[1];\n        });\n        //console.log(arg);\n        if (!infile) {\n            usage();\n            return;\n        }\n        const end = await operate(infile, outfile, async (dt) => {\n            const f = new SCS(dt, resolver(infile));\n            return JSON.stringify(f.exec(arg), null, 2);\n        });\n        if (end != -1) {\n            console.log('Executed', infile, 'in', end.toFixed(2), 'ms');\n        }\n    } else if (command == 'minifyMany') {\n        const files = await resolve([...args]);\n        args = [];\n        for (const fl of files) {\n            args = [fl, fl];\n            await main('minify');\n        }\n    } else if (command == 'prettyMany') {\n        const files = await resolve([...args]);\n        args = [];\n        for (const fl of files) {\n            args = [fl, fl];\n            await main('pretty');\n        }\n    } else if (command == 'lint') {\n        const files = await resolve([...args]);\n        const lints: (LintObject & { file: string })[] = [];\n        for (const fl of files) {\n            const data = await readFile(fl, 'utf-8');\n            const f = new SCS(data, resolver(fl));\n            const lint = f.lint();\n            lints.push(...lint.map((n) => ({ ...n, file: fl })));\n        }\n        lints.forEach((lint) => {\n            console.log(\n                `[${colors[lint.level]}${LintLevel[lint.level].toUpperCase()}${\n                    colors['reset']\n                }] ${lint.file}:${lint.location.start.line}:${\n                    lint.location.start.column\n                } ${lint.message}`\n            );\n        });\n    } else {\n        usage();\n    }\n}\n//console.log(args);\nmain(args.shift());\n"]}